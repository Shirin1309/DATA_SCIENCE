import pandas as pd
import pylab as pl
import numpy as np
import scipy.optimize as opt
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt


a=pd.read_csv('cell_samples.csv')
print(a)

a.head()

ax = a[a['Class'] == 4][0:50].plot(kind='scatter', x='Clump', y='UnifSize', color='DarkBlue', label='malignant');
a[a['Class'] == 2][0:50].plot(kind='scatter', x='Clump', y='UnifSize', color='Yellow', label='benign', ax=ax);
plt.show()


a.dtypes


a = a[pd.to_numeric(a['BareNuc'], errors='coerce').notnull()]
a['BareNuc'] = a['BareNuc'].astype('int')
a.dtypes





b = a[['Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize', 'BareNuc', 'BlandChrom', 'NormNucl', 'Mit']]
X = np.asarray(b)
X[0:5]

a['Class'] = a['Class'].astype('int')
y = np.asarray(a['Class'])
y [0:5]

X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=3)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

from sklearn import svm
s = svm.SVC(kernel='rbf')
s.fit(X_train, y_train) 

pred =s.predict(X_test)
pred [0:5]

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print(classification_report(y_test,pred))
print(confusion_matrix(y_test,pred))
print(accuracy_score(y_test,pred))

